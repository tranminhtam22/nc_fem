load "medit"
ofstream re("convergence.txt");
int n=100;
// border G1(t=0,1){x=10*t;y=-1;label=1;}
// border G2(t=0,1){x=10;y=-1+2*t;label=2;}
// border G3(t=0,1){x=10-10*t;y=1;label=3;}
// border G4(t=0,1){x=0;y=1-2*t;label=4;}
// border C(t=0,2*pi){x=2+0.5*cos(t);y=0.5*sin(t);label=5;}
// mesh Th=buildmesh(G1(5*n)+G2(n)+G3(5*n)+G4(n)+C(-3*n));
mesh Th=square(n,n);
fespace Xh(Th,P2);
fespace Mh(Th,P1);
Xh u2,v2,v,T,Told;
Xh u1,v1;
Mh p,q;
real epsr = 1e-8;
Xh uu;

int i=0;
//real nu=1./2000.;
real dt=0.0001;
real alpha=1./dt;
real k=100000;
//real Pr=1.;
//real Ra=100.;
//Xh Qn=100*(n/(2*cosh(n*(x-0.75))*cosh(n*(x-0.75))))*(n/(2*cosh(n*(y-0.25))*cosh(n*(y-0.25))));
//func g=4.*y*(1.-y);
Xh up1,up2;

problem  NST (T,v,init=i) =
    int2d(Th) ( alpha*( T*v) +  ( dx(T)*dx(v) +dy(T)*dy(v)))
  //- int2d(Th) ( Qn*v )
  //- int1d(Th,2) ( g*v)
  + int2d(Th) ( -alpha*convect([up1,up2],-dt,Told)*v)
  + on(4,T=0.5)
  + on(2,T=-0.5)
;

problem  NS ([u1,u2,p],[v1,v2,q],init=i) =
    int2d(Th)(
             alpha*( u1*v1 + u2*v2)
            + ( dx(u1)*dx(v1) + dy(u1)*dy(v1)
            +  dx(u2)*dx(v2) + dy(u2)*dy(v2) )
            - p*q*epsr
            + p*dx(v1)+ p*dy(v2)
            + dx(u1)*q+ dy(u2)*q
           )
  + int2d(Th) ( -alpha*convect([up1,up2],-dt,up1)*v1 -alpha*convect([up1,up2],-dt,up2)*v2 )
  - int2d(Th) ( k*T*v2)
  + on(1,2,3,4,u1=0,u2=0)
;

for (i=0;i<=2000;i++)
 {
	Told=T;
	up1=u1;
	up2=u2;
	NST;
	NS;
   	//plot([u1,u2]);
   	//plot(T,fill=0);
  if ((i==30)||(i ==100)||(i==250)||(i==1000)||(i==2000))
    {
      
      Xh psi,phi;
    solve streamlines(psi,phi) = int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi))
    + int2d(Th)( -phi*(dy(u1)-dx(u2)))
    + on(1,2,3,4,psi=0);
    plot(psi,fill=0);
        savemesh(Th,"Tcdf"+string(i)+".mesh");
        savesol("Tcdf"+ string(i) + ".sol",Th,T);
        savemesh(Th,"pcdf"+string(i)+".mesh");
        savesol("pcdf"+ string(i) + ".sol",Th,p);
        savemesh(Th,"scdf"+string(i)+".mesh");
        savesol("scdf"+ string(i) + ".sol",Th,psi);
        savemesh(Th,"ucdf"+string(i)+".mesh");
        savesol("ucdf"+ string(i) + ".sol",Th,[u1,u2]);
        uu=sqrt(u1^2+u2^2);
        re << i*dt << "\t" << uu[].max << endl;
    }  
} ;
